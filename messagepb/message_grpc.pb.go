// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.1
// source: messagepb/message.proto

package messagepb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	MessageService_CombineMessage_FullMethodName        = "/message.MessageService/CombineMessage"
	MessageService_SplitMessageIntoWords_FullMethodName = "/message.MessageService/SplitMessageIntoWords"
	MessageService_MakeParagraphByWord_FullMethodName   = "/message.MessageService/MakeParagraphByWord"
	MessageService_Average_FullMethodName               = "/message.MessageService/Average"
)

// MessageServiceClient is the client API for MessageService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MessageServiceClient interface {
	CombineMessage(ctx context.Context, in *MessageRequest, opts ...grpc.CallOption) (*CombineMessageResponse, error)
	SplitMessageIntoWords(ctx context.Context, in *SplitMessage, opts ...grpc.CallOption) (MessageService_SplitMessageIntoWordsClient, error)
	MakeParagraphByWord(ctx context.Context, opts ...grpc.CallOption) (MessageService_MakeParagraphByWordClient, error)
	Average(ctx context.Context, opts ...grpc.CallOption) (MessageService_AverageClient, error)
}

type messageServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMessageServiceClient(cc grpc.ClientConnInterface) MessageServiceClient {
	return &messageServiceClient{cc}
}

func (c *messageServiceClient) CombineMessage(ctx context.Context, in *MessageRequest, opts ...grpc.CallOption) (*CombineMessageResponse, error) {
	out := new(CombineMessageResponse)
	err := c.cc.Invoke(ctx, MessageService_CombineMessage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServiceClient) SplitMessageIntoWords(ctx context.Context, in *SplitMessage, opts ...grpc.CallOption) (MessageService_SplitMessageIntoWordsClient, error) {
	stream, err := c.cc.NewStream(ctx, &MessageService_ServiceDesc.Streams[0], MessageService_SplitMessageIntoWords_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &messageServiceSplitMessageIntoWordsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MessageService_SplitMessageIntoWordsClient interface {
	Recv() (*ResponseWords, error)
	grpc.ClientStream
}

type messageServiceSplitMessageIntoWordsClient struct {
	grpc.ClientStream
}

func (x *messageServiceSplitMessageIntoWordsClient) Recv() (*ResponseWords, error) {
	m := new(ResponseWords)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *messageServiceClient) MakeParagraphByWord(ctx context.Context, opts ...grpc.CallOption) (MessageService_MakeParagraphByWordClient, error) {
	stream, err := c.cc.NewStream(ctx, &MessageService_ServiceDesc.Streams[1], MessageService_MakeParagraphByWord_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &messageServiceMakeParagraphByWordClient{stream}
	return x, nil
}

type MessageService_MakeParagraphByWordClient interface {
	Send(*ParagraphRequest) error
	CloseAndRecv() (*ParagraphResponse, error)
	grpc.ClientStream
}

type messageServiceMakeParagraphByWordClient struct {
	grpc.ClientStream
}

func (x *messageServiceMakeParagraphByWordClient) Send(m *ParagraphRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *messageServiceMakeParagraphByWordClient) CloseAndRecv() (*ParagraphResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(ParagraphResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *messageServiceClient) Average(ctx context.Context, opts ...grpc.CallOption) (MessageService_AverageClient, error) {
	stream, err := c.cc.NewStream(ctx, &MessageService_ServiceDesc.Streams[2], MessageService_Average_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &messageServiceAverageClient{stream}
	return x, nil
}

type MessageService_AverageClient interface {
	Send(*AverageRequest) error
	CloseAndRecv() (*AverageResponse, error)
	grpc.ClientStream
}

type messageServiceAverageClient struct {
	grpc.ClientStream
}

func (x *messageServiceAverageClient) Send(m *AverageRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *messageServiceAverageClient) CloseAndRecv() (*AverageResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(AverageResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MessageServiceServer is the server API for MessageService service.
// All implementations must embed UnimplementedMessageServiceServer
// for forward compatibility
type MessageServiceServer interface {
	CombineMessage(context.Context, *MessageRequest) (*CombineMessageResponse, error)
	SplitMessageIntoWords(*SplitMessage, MessageService_SplitMessageIntoWordsServer) error
	MakeParagraphByWord(MessageService_MakeParagraphByWordServer) error
	Average(MessageService_AverageServer) error
	mustEmbedUnimplementedMessageServiceServer()
}

// UnimplementedMessageServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMessageServiceServer struct {
}

func (UnimplementedMessageServiceServer) CombineMessage(context.Context, *MessageRequest) (*CombineMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CombineMessage not implemented")
}
func (UnimplementedMessageServiceServer) SplitMessageIntoWords(*SplitMessage, MessageService_SplitMessageIntoWordsServer) error {
	return status.Errorf(codes.Unimplemented, "method SplitMessageIntoWords not implemented")
}
func (UnimplementedMessageServiceServer) MakeParagraphByWord(MessageService_MakeParagraphByWordServer) error {
	return status.Errorf(codes.Unimplemented, "method MakeParagraphByWord not implemented")
}
func (UnimplementedMessageServiceServer) Average(MessageService_AverageServer) error {
	return status.Errorf(codes.Unimplemented, "method Average not implemented")
}
func (UnimplementedMessageServiceServer) mustEmbedUnimplementedMessageServiceServer() {}

// UnsafeMessageServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MessageServiceServer will
// result in compilation errors.
type UnsafeMessageServiceServer interface {
	mustEmbedUnimplementedMessageServiceServer()
}

func RegisterMessageServiceServer(s grpc.ServiceRegistrar, srv MessageServiceServer) {
	s.RegisterService(&MessageService_ServiceDesc, srv)
}

func _MessageService_CombineMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServiceServer).CombineMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MessageService_CombineMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServiceServer).CombineMessage(ctx, req.(*MessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageService_SplitMessageIntoWords_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SplitMessage)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MessageServiceServer).SplitMessageIntoWords(m, &messageServiceSplitMessageIntoWordsServer{stream})
}

type MessageService_SplitMessageIntoWordsServer interface {
	Send(*ResponseWords) error
	grpc.ServerStream
}

type messageServiceSplitMessageIntoWordsServer struct {
	grpc.ServerStream
}

func (x *messageServiceSplitMessageIntoWordsServer) Send(m *ResponseWords) error {
	return x.ServerStream.SendMsg(m)
}

func _MessageService_MakeParagraphByWord_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MessageServiceServer).MakeParagraphByWord(&messageServiceMakeParagraphByWordServer{stream})
}

type MessageService_MakeParagraphByWordServer interface {
	SendAndClose(*ParagraphResponse) error
	Recv() (*ParagraphRequest, error)
	grpc.ServerStream
}

type messageServiceMakeParagraphByWordServer struct {
	grpc.ServerStream
}

func (x *messageServiceMakeParagraphByWordServer) SendAndClose(m *ParagraphResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *messageServiceMakeParagraphByWordServer) Recv() (*ParagraphRequest, error) {
	m := new(ParagraphRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _MessageService_Average_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MessageServiceServer).Average(&messageServiceAverageServer{stream})
}

type MessageService_AverageServer interface {
	SendAndClose(*AverageResponse) error
	Recv() (*AverageRequest, error)
	grpc.ServerStream
}

type messageServiceAverageServer struct {
	grpc.ServerStream
}

func (x *messageServiceAverageServer) SendAndClose(m *AverageResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *messageServiceAverageServer) Recv() (*AverageRequest, error) {
	m := new(AverageRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MessageService_ServiceDesc is the grpc.ServiceDesc for MessageService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MessageService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "message.MessageService",
	HandlerType: (*MessageServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CombineMessage",
			Handler:    _MessageService_CombineMessage_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SplitMessageIntoWords",
			Handler:       _MessageService_SplitMessageIntoWords_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "MakeParagraphByWord",
			Handler:       _MessageService_MakeParagraphByWord_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Average",
			Handler:       _MessageService_Average_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "messagepb/message.proto",
}
